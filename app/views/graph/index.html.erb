<div class="container">
    <div class="column">
        <div class="header">Subject</div>
        <input type="text" id="subject-input" placeholder="Entrez un sujet" oninput="filterList('subject')">
        <div class="entry-list" id="subject-list"></div>
    </div>

    <div class="column">
        <div class="header">Predicate</div>
        <input type="text" id="predicate-input" placeholder="Entrez un prédicat" oninput="filterList('predicate')">
        <div class="entry-list" id="predicate-list"></div>
    </div>

    <div class="column">
        <div class="header">Object</div>
        <input type="text" id="object-input" placeholder="Entrez un objet" oninput="filterList('object')">
        <div class="entry-list" id="object-list"></div>
    </div>
</div>

<div class="add-button-container">
    <button id="add-button" onclick="addEntry()">Créer un triplet</button>
</div>

<div id="status" class="status"></div>

<script>
    let allAtoms = [];
    let filteredAtoms = {
        subject: [],
        predicate: [],
        object: []
    };

    // Charger tous les atomes au démarrage
    window.addEventListener('load', loadAtoms);

    async function loadAtoms() {
        try {
            const response = await fetch('/api/v1/graph');
            const result = await response.json();
            
            // Extraire tous les atomes uniques
            const atoms = new Set();
            
            // Ajouter les Atoms simples
            result.data.atoms.forEach(item => {
                if (item.type === 'Atom') {
                    atoms.add(item.label);
                }
            });

            // Extraire les atomes des Triples
            result.data.atoms.forEach(item => {
                if (item.type === 'Triple') {
                    atoms.add(item.subject.label);
                    atoms.add(item.predicate.label);
                    atoms.add(item.object.label);
                }
            });

            allAtoms = Array.from(atoms);
            
            // Initialiser les listes filtrées
            filteredAtoms.subject = [...allAtoms];
            filteredAtoms.predicate = [...allAtoms];
            filteredAtoms.object = [...allAtoms];

            // Afficher les listes
            updateLists();
        } catch (error) {
            console.error('Erreur lors du chargement des atomes:', error);
            showStatus('Erreur lors du chargement des atomes', false);
        }
    }

    function filterList(type) {
        const input = document.getElementById(`${type}-input`);
        const searchTerm = input.value.toLowerCase();

        // Filtrer les atomes qui correspondent au terme de recherche
        filteredAtoms[type] = allAtoms.filter(atom => 
            atom.toLowerCase().includes(searchTerm)
        );

        // Mettre à jour l'affichage de la liste
        updateList(type);
    }

    function updateLists() {
        updateList('subject');
        updateList('predicate');
        updateList('object');
    }

    function updateList(type) {
        const list = document.getElementById(`${type}-list`);
        list.innerHTML = '';

        filteredAtoms[type].forEach(atom => {
            const entry = document.createElement('div');
            entry.className = 'entry';
            entry.textContent = atom;
            entry.style.cursor = 'pointer';
            entry.onclick = () => selectEntry(type, atom);
            list.appendChild(entry);
        });
    }

    function selectEntry(type, value) {
        document.getElementById(`${type}-input`).value = value;
    }

    async function addEntry() {
        const subject = document.getElementById('subject-input').value;
        const predicate = document.getElementById('predicate-input').value;
        const object = document.getElementById('object-input').value;

        if (subject && predicate && object) {
            try {
                document.getElementById('add-button').disabled = true;

                const response = await fetch('/api/v1/graph', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        triple: {
                            subject_label: subject,
                            predicate_label: predicate,
                            object_label: object
                        }
                    })
                });

                if (response.ok) {
                    // Ajouter les nouveaux atomes à la liste si nécessaire
                    [subject, predicate, object].forEach(atom => {
                        if (!allAtoms.includes(atom)) {
                            allAtoms.push(atom);
                        }
                    });

                    // Mettre à jour les listes
                    updateLists();

                    // Effacer les champs
                    document.getElementById('subject-input').value = '';
                    document.getElementById('predicate-input').value = '';
                    document.getElementById('object-input').value = '';

                    showStatus('Triplet créé avec succès!', true);
                } else {
                    const result = await response.json();
                    showStatus(`Erreur lors de la création du triplet: ${result.error}`, false);
                }
            } catch (error) {
                showStatus('Erreur de connexion au serveur', false);
                console.error('Erreur:', error);
            } finally {
                document.getElementById('add-button').disabled = false;
            }
        }
    }

    function showStatus(message, isSuccess) {
        const status = document.getElementById('status');
        status.textContent = message;
        status.className = `status ${isSuccess ? 'success' : 'error'}`;
        status.style.display = 'block';

        setTimeout(() => {
            status.style.display = 'none';
        }, 3000);
    }
</script>
